#!/usr/bin/env python

import sys

USAGE_INFO = 'Usage: ggsr info\n' \
             '       ggsr step1 <sequence filename> <pdb filename> ' \
             '[<output files prefix>]\n' \
             '       ggsr step2 [-a <AA alignment filename>] [-c <contacts ' \
             'filename>] [-o <output libraries filename>]\n' \
             '       ggsr step3 [-l <golden gate libraries filename>] [-o ' \
             '<chosen library filename>]\n' \
             '       ggsr step4 [-l <chosen library filename>] [-a <AA ' \
             'alignment filename>] [-c <codon alignment filename>] [-o ' \
             '<output fragments filename>]'


def parse_arguments(flags_defaults_dict):
    if len(sys.argv) % 2 != 0 or len(sys.argv) > 2 + \
                                              2 * len(flags_defaults_dict):
        print(USAGE_INFO)
        sys.exit()
    remaining_flags = list(flags_defaults_dict.keys())
    function_args = flags_defaults_dict
    for flag, filename in zip(sys.argv[2::2], sys.argv[3::2]):
        if flag not in remaining_flags:
            print(USAGE_INFO)
            sys.exit()
        remaining_flags.remove(flag)
        function_args[flag] = filename
    return function_args


if len(sys.argv) < 2 or sys.argv[1] not in ('info', 'step1', 'step2', 'step3',
                                            'step4'):
    print(USAGE_INFO)

elif sys.argv[1] == 'info':
    print('ggsr is a program for designing SCHEMA-RASPP libraries with Golden '
          'Gate Assembly.\n')
    print('Each step should be run in order. The program requires two input '
          'files: a fasta file with the parent sequences and a pdb file of '
          'a protein similar to at least one of the parents.\n')
    print('Run "ggsr" for program usage information. The simplest way to run '
          'this program is avoid specifying any file name beyond the two '
          'inputs required by step1. Default filenames will then be used.\n')
    print('View https://github.com/RomeroLab/SCHEMA-library-design/wiki for '
          'more information.\n')

elif sys.argv[1] == 'step1':
    if len(sys.argv) not in (4, 5):
        print(USAGE_INFO)
        sys.exit()
    step1_args = {'sequences': sys.argv[2],
                  'pdb': sys.argv[3],
                  'output': ''}
    if len(sys.argv) == 5:
        step1_args['output'] = sys.argv[4]
    # run step1 here

elif sys.argv[1] == 'step2':
    step2_defaults = {'-a': 'AA_alignment.fasta',
                      '-c': 'contacts.json',
                      '-o': 'libraries.json'}
    step2_args = parse_arguments(step2_defaults)
    # run step2

elif sys.argv[2] == 'step3':
    step3_defaults = {'-l': 'gg_libraries.json',
                      '-o': 'chosen_library.json'}
    step3_args = parse_arguments(step3_defaults)
    # run step3

elif sys.argv[2] == 'step4':
    step4_defaults = {'-l': 'chosen_library.json',
                      '-a': 'AA_alignment.fasta',
                      '-c': 'CDN_alignment.fasta',
                      '-o': 'fragment_order.fasta'}
    step4_args = parse_arguments(step4_defaults)
    # run step4
